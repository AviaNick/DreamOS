;;;;;;;;;;;;;;;;;;
;;; VGA Driver ;;;
;;;;;;;;;;;;;;;;;;

(define VIDEO #xb8000)
(define CRTC_ADDRESS #x03d4)
(define CURSOR_LOC_HIGH_REG #x0e)
(define CURSOR_LOC_LOW_REG #x0f)

(define (cursor-offset row col)
  (+ (* row SCREEN_COLS) col))
(define (cursor-end-offset)
  (cursor-offset SCREEN_ROWS 0))

(define (vga-prepare-reg addr reg)
  (if addr
    (mov addr dx)
    (dec dx))
  (movb reg al)
  (outb dx)
  (inc edx))

(: 'puts_video)
  (mov ecx esi)
  (mov (@ 'str_len) ecx)
(: 'puts_video_esi_ecx)
  (mov (@ 'cursor) edi)
  (movb (@ 'vga_attribute) ah)
(: 'puts_loop)
  (lodsb)
  (cmpb 10 al) ;newline
  (jne 'puts_loop_not_newline)
  (call 'put_newline)
  (jmp 'puts_loop_next)

(: 'puts_loop_not_newline)
  (mov VIDEO edx)
  (cmpb 9 al) ;tab
  (je 'puts_loop_tab)
  (cmpb 8 al) ;backspace
  (jne 'puts_loop_char)
  (dec edi)
  (movb 0 al)
  (movb (@ 'vga_attribute) ah)
  (opd-size)(mov ax (@ 0 edx edi 1))
  (jmp 'puts_loop_next)

(: 'puts_loop_tab)
  (movb #\space al)
  (opd-size)(mov ax (@ 0 edx edi 1))
  (inc edi)
  (call 'conditional_scroll)
(: 'puts_loop_char)
  (opd-size)(mov ax (@ 0 edx edi 1))
  (inc edi)
  (call 'conditional_scroll)
(: 'puts_loop_next)
  (loop 'puts_loop)

(: 'move_cursor)
  (mov edi (@ 'cursor))
  (mov VIDEO edx)
  (cmpb 0 (@ 1 edx edi 1))
  (jne 'colored_cursor)
  (movb (@ 'vga_attribute) al)
  (movb al (@ 1 edx edi 1))
(: 'colored_cursor)

  (vga-prepare-reg CRTC_ADDRESS CURSOR_LOC_LOW_REG)
  (mov edi eax)
  (outb dx)

  (vga-prepare-reg #f CURSOR_LOC_HIGH_REG)
  (mov edi eax)
  (shr 8 ax)
  (outb dx)
  (popa)
  (ret)

(: 'put_newline)
  (push eax)
  (mov edi eax)
  (mov SCREEN_COLS ebx)
  (clear edx)
  (div ebx)
  (inc eax)
  (mul ebx)
  (mov eax edi)
  (pop eax)

(: 'conditional_scroll)
  (cmp (cursor-end-offset) edi)
  (jb 'no_console_scroll)
  (call 'console_scroll)
  (mov (cursor-offset (- SCREEN_ROWS SCROLL_ROWS) 0) edi)
(: 'no_console_scroll)
  (ret)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(new-additional-primitive "vga-scroll-up")
  (insure-no-more-args ARGL)
(: 'console_scroll)
  (push eax)
  (push esi)
  (push ecx)
; Move all but top row up one row
  (mov (+ VIDEO (* 2 (cursor-offset SCROLL_ROWS 0))) esi)
  (mov VIDEO edi)
  (mov (quotient (* SCREEN_COLS (- SCREEN_ROWS SCROLL_ROWS)) 2) ecx)
  (rep)(movs)
; Clear bottom row
  (mov 0 eax)
  (mov (quotient (* SCROLL_ROWS SCREEN_COLS) 2) ecx)
  (rep)(stos)
  (pop ecx)
  (pop esi)
  (pop eax)
  (ret)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(new-additional-primitive "vga-position-x")
  (insure-no-more-args ARGL)
  (mov (@ 'cursor) VAL)
  (mov SCREEN_COLS TEMP)
  (cdq)
  (div TEMP)
  (mov INTEGER (@ FREE))
  (mov edx (@ 4 FREE))
  (mov FREE VAL)
  (clear edx)
  (jmpl 'advance_free)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(new-additional-primitive "vga-position-y")
  (insure-no-more-args ARGL)
  (mov (@ 'cursor) VAL)
  (mov SCREEN_COLS TEMP)
  (cdq)
  (div TEMP)
  (mov INTEGER (@ FREE))
  (mov VAL (@ 4 FREE))
  (mov FREE VAL)
  (clear edx)
  (jmpl 'advance_free)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(new-additional-primitive "vga-set-position")
  (insure-more-args ARGL)
  (call 'get_exact_natural)
  (pusha)
  (mov (@ 4 TEMP) eax)
  (mov SCREEN_COLS ecx)
  (mul ecx)
  (clear edx)
  (mov (@ 4 ARGL) ARGL)
  (call 'get_last_exact_natural)
  (add (@ 4 ecx) eax)
  (jsl 'error_invalid_index)
  (cmp (* SCREEN_ROWS SCREEN_COLS) eax)
  (jael 'error_invalid_index)
  (mov eax edi)
  (jmpl 'move_cursor)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(new-additional-primitive "vga-clear")
  (insure-no-more-args ARGL)
  (mov VIDEO edi)
  (mov (quotient (* SCREEN_COLS SCREEN_ROWS) 2) ecx)
  (clear eax)
  (rep)(stos)
  (clear edi)
  (ret)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(new-additional-primitive "vga-clear-row")
  (insure-no-more-args ARGL)
  (mov (@ 'cursor) edi)
  (mov edi eax)
  (shl 1 edi)
  (add VIDEO edi)
  (cdq)
  (mov SCREEN_COLS TEMP)
  (div TEMP)
  (sub edx TEMP)
  (clear eax edx)
(: 'vga_clear_row_loop)
  (stosb)
  (stosb)
  (loop 'vga_clear_row_loop)
  (ret)
  
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(new-additional-primitive "vga-set-attribute")
  (call 'get_last_exact_natural)
  (mov (@ 4 TEMP) TEMP)
  (mov TEMP (@ 'vga_attribute))
  (ret)
